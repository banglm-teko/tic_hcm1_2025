package main

import (
	"encoding/json"
	"fmt"
	"github.com/go-resty/resty/v2"
	"net/http"
	"os"
)

// AssessUserForOffer simulates an AI model's assessment for generating an offer
func AssessUserForOffer(userData *UserData) (bool, string) {
	// --- THIS SECTION SIMULATES THE RESULT FROM A REAL AI MODEL ---
	// In a real scenario, ML/AI models would run here to provide predictions.
	// The churn_risk and preferred_categories in userData are assumed to be
	// already present from AI's output and stored in the user_preferences table.

	// Assume high churn risk threshold > 0.7
	isHighChurnRisk := userData.ChurnRisk > 0.7

	preferredCategory := ""
	if len(userData.PreferredCategories) > 0 {
		// Pick the most common or most recent category from AI-calculated preferences
		preferredCategory = userData.PreferredCategories[0]
	}

	if isHighChurnRisk && preferredCategory != "" {
		fmt.Printf("User %s (ID: %d) has high churn risk (%.2f) and preferred category %s.\n",
			userData.Username, userData.UserID, userData.ChurnRisk, preferredCategory)
		return true, preferredCategory
	} else {
		fmt.Printf("User %s (ID: %d) does not meet criteria for a re-engagement offer (Churn Risk: %.2f).\n",
			userData.Username, userData.UserID, userData.ChurnRisk)
		return false, ""
	}
}

// GeneratePersonalizedMessageWithLLM calls OpenAI API to generate a personalized message
func GeneratePersonalizedMessageWithLLM(username, offerValue, targetCategory string) (string, error) {
	apiKey := os.Getenv("OPENAI_API_KEY")
	if apiKey == "" || apiKey == "YOUR_OPENAI_API_KEY" {
		return "Chúng tôi có một ưu đãi đặc biệt dành cho bạn!",
			fmt.Errorf("OPENAI_API_KEY is not configured. Cannot generate LLM message.")
	}

	client := resty.New()
	url := "https://api.openai.com/v1/chat/completions"

	reqBody := OpenAIRequest{
		Model: "gpt-3.5-turbo", // Or "gpt-4" if you have access
		Messages: []struct {
			Role    string `json:"role"`
			Content string `json:"content"`
		}{
			{Role: "system", Content: "Bạn là một trợ lý marketing chuyên nghiệp."},
			{Role: "user", Content: fmt.Sprintf(`
                Bạn là một trợ lý marketing thông minh và thân thiện.
                Hãy tạo một tin nhắn khuyến mãi ngắn gọn, hấp dẫn (khoảng 30-50 từ) để gửi cho khách hàng "%s".
                Khách hàng này lâu rồi không mua hàng và có nguy cơ rời bỏ.
                Ưu đãi đặc biệt dành cho họ là "%s" áp dụng cho danh mục "%s".
                Sử dụng ngôn ngữ tự nhiên, gần gũi, thể hiện sự quan tâm và kích thích họ quay lại.
                Bắt đầu bằng một câu chào thân mật và kết thúc bằng một lời kêu gọi hành động nhẹ nhàng.
            `, username, offerValue, targetCategory)},
		},
		MaxTokens:   100,
		Temperature: 0.7,
	}

	jsonBody, err := json.Marshal(reqBody)
	if err != nil {
		return "", fmt.Errorf("error marshalling OpenAI request: %w", err)
	}

	resp, err := client.R().
		SetHeader("Content-Type", "application/json").
		SetAuthToken(apiKey).
		SetBody(jsonBody).
		Post(url)

	if err != nil {
		return "", fmt.Errorf("error making OpenAI API request: %w", err)
	}

	if resp.StatusCode() != http.StatusOK {
		return "", fmt.Errorf("OpenAI API returned non-OK status: %d - %s", resp.StatusCode(), resp.String())
	}

	var openAIResp OpenAIResponse
	if err := json.Unmarshal(resp.Body(), &openAIResp); err != nil {
		return "", fmt.Errorf("error unmarshalling OpenAI response: %w", err)
	}

	if len(openAIResp.Choices) > 0 {
		return openAIResp.Choices[0].Message.Content, nil
	}

	return "Chúng tôi có một ưu đãi đặc biệt dành cho bạn!", fmt.Errorf("no message generated by OpenAI")
}
